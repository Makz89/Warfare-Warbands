using RimWorld.Planet;
using RimWorld;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Verse;
using Verse.Sound;
using static RimWorld.ColonistBar;
using WarfareAndWarbands.Warband.WarbandComponents.WarbandUpdates;
using WarfareAndWarbands.Warband.UI;

namespace WarfareAndWarbands.Warband.WarbandComponents
{
    public class PlayerWarbandManager : IExposable
    {

        public PlayerWarbandManager(Warband warband)
        {
            this.warband = warband;
            droppodUpgrade = new DroppodUpgrade(warband);
            cooldownManager = new PlayerWarbandCooldownManager();
            this.lootManager = new PlayerWarbandLootManager();
        }

        public void OrderPlayerWarbandToAttack()
        {
            CameraJumper.TryJump(CameraJumper.GetWorldTarget(warband), CameraJumper.MovementMode.Pan);
            Find.WorldTargeter.BeginTargeting(new Func<GlobalTargetInfo, bool>(OrderPlayerWarbandToAttack), false,
                onUpdate: delegate
                {
                    GenDraw.DrawWorldRadiusRing(warband.Tile, playerAttackRange);
                });
        }

        public bool OrderPlayerWarbandToAttack(GlobalTargetInfo info)
        {
            if (!warband.bandMembers.Any(x => x.Value > 0))
            {
                Messages.Message("WAW.emptyBand".Translate(), MessageTypeDefOf.RejectInput);
                return false;
            }

            if (!this.cooldownManager.CanFireRaid())
            {
                Messages.Message("WAW.WaitForCooldown".Translate(this.cooldownManager.GetRemainingDays().ToString("0.0")), MessageTypeDefOf.RejectInput);
                return false;
            }

            if (info.WorldObject == null ||
                info.WorldObject as MapParent == null ||
                WarbandUtil.IsWorldObjectNonHostile(info.WorldObject))
            {
                Messages.Message("WAW.InvalidObject".Translate(), MessageTypeDefOf.RejectInput);
                return false;
            }

            if (Find.WorldGrid.ApproxDistanceInTiles(info.Tile, warband.Tile) > playerAttackRange)
            {
                Messages.Message("WAW.FarObject".Translate(), MessageTypeDefOf.RejectInput);
                return false;
            }

            int cost = (int)PlayerWarbandArrangement.GetCost(warband.bandMembers);
            if (!WarbandUtil.TryToSpendSilver(Find.AnyPlayerHomeMap, cost))
            {
                Messages.Message("WAW.CantAfford".Translate(), MessageTypeDefOf.NegativeEvent);
                return false;
            }
            SoundDefOf.ExecuteTrade.PlayOneShotOnCamera();
            var enemy = (MapParent)info.WorldObject;
            targetMapP = enemy;
            WarbandUI.GetPlayerWarbandAttackOptions(this);
            return true;
        }


        public void AttackLand()
        {
            if (targetMapP != null)
                LongEventHandler.QueueLongEvent(delegate ()
                {
                    this.cooldownManager.SetLastRaidTick();
                    WarbandUtil.OrderPlayerWarbandToAttack(targetMapP, warband);
                }, "GeneratingMapForNewEncounter", false, null, true);

        }

        public void AttackDropPod()
        {
            if (targetMapP != null && targetMapP.Map != null)
            {
                this.cooldownManager.SetLastRaidTick();
                droppodUpgrade.LaunchWarbandInMap(targetMapP.Map);
            }
        }

        public void WithdrawLoot()
        {
            this.lootManager.WidthdrawLoot();
        }

        public void WithdrawLootInSilver()
        {
            this.lootManager.WithdrawLootInSilver();
        }

        public void StoreAll(IEnumerable<Thing> things)
        {
            this.lootManager.StoreAll(things);
        }

        public void StoreThing(ref Thing thing)
        {
            lootManager.StoreThing(ref thing);
        }

        public void ResetRaidTick()
        {
            this.cooldownManager.ResetRaidTick();
        }

        public bool OrderPlayerWarbandToResettle(GlobalTargetInfo info, Warband warband)
        {
            return this.resettleManager.OrderPlayerWarbandToResettle(info, warband);
        }

        public void ExposeData()
        {
            lootManager.ExposeData();
            //cooldownManager.ExposeData();
            //resettleManager.ExposeData();
        }

        internal bool CanFireRaid()
        {
           return cooldownManager.CanFireRaid();
        }

        internal float GetRemainingDays()
        {
            return cooldownManager.GetRemainingDays();
        }

        private readonly Warband warband;
        public MapParent targetMapP;

        //upgrades
        public DroppodUpgrade droppodUpgrade;

        //sub managers
        public PlayerWarbandLootManager lootManager;
        public PlayerWarbandCooldownManager cooldownManager;
        public PlayerWarbandResettleManager resettleManager;



        private static readonly int playerAttackRange = 10;

    }
}
